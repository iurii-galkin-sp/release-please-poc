# ------------------------------------------------------------------------------
# WORKFLOW PURPOSE:
# This is a single, intelligent workflow that manages the entire two-phase
# release process. It determines which stage to run based on the context of the
# push event to the 'main' branch, solving race conditions and trigger issues.
# ------------------------------------------------------------------------------
name: 'Release Please: Main Workflow'

on:
  push:
    branches:
      - main
  # Allows manual trigger for debugging or re-running a failed process.
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  # ----------------------------------------------------------------------------
  # JOB 1: Prepare Release PR
  # This job runs for ANY push to 'main' EXCEPT for merges from our own bot.
  # ----------------------------------------------------------------------------
  prepare-release-pr:
    name: '1. Prepare Release PR'
    runs-on: ubuntu-latest
    outputs:
      # We output the created PR number to make dependent jobs more robust.
      pr_number: ${{ steps.release-pr.outputs.pr_number }}
    
    # MOTIVATION: This 'if' condition is the core of our logic.
    # It prevents this job from running when the push is a merge of a Release PR,
    # thus preventing a race condition with the 'finalize-release' job.
    # The string 'chore(project): prepare release' is derived directly from
    # the 'pull-request-title-pattern' in the release-please-config.json file.
    if: "!contains(github.event.head_commit.message, 'chore(project): prepare release')"

    steps:
      - name: 'Run Release Please to prepare a Pull Request'
        id: release-pr
        uses: googleapis/release-please-action@v4
        with:
          # MOTIVATION: Per v4 docs, this flag ensures only a PR is created/updated.
          skip-github-release: true
          config-file: release-please-config.json
          manifest-file: release-please-manifest.json
          token: ${{ secrets.RELEASE_PLEASE_POC_TOKEN }}
          
  # ----------------------------------------------------------------------------
  # JOB 2: Finalize Release
  # This job runs ONLY when a push to 'main' is the result of merging a Release PR.
  # ----------------------------------------------------------------------------
  finalize-release:
    name: '2. Finalize Release'
    runs-on: ubuntu-latest
    # MOTIVATION: This 'if' condition ensures this job ONLY runs after a
    # release PR has been merged, acting as the trigger for the finalization stage.
    # The string 'chore(project): prepare release' is derived directly from
    # the 'pull-request-title-pattern' in the release-please-config.json file.
    if: "contains(github.event.head_commit.message, 'chore(project): prepare release')"

    steps:
      - name: 'Run Release Please to create GitHub Releases and Tags'
        id: release
        uses: googleapis/release-please-action@v4
        with:
          # MOTIVATION: Per v4 docs, this flag ensures only releases/tags are created.
          skip-github-pull-request: true
          config-file: release-please-config.json
          manifest-file: release-please-manifest.json
          token: ${{ secrets.RELEASE_PLEASE_POC_TOKEN }}

  # ----------------------------------------------------------------------------
  # JOB 3: Fix PR Checks
  # This job solves the problem of status checks not running on bot-created PRs.
  # It runs after 'prepare-release-pr' and forces GitHub to re-evaluate checks.
  # ----------------------------------------------------------------------------
  fix-pr-checks:
    name: 'Fix Status Checks on Release PR'
    runs-on: ubuntu-latest
    needs: prepare-release-pr
    # MOTIVATION: This job runs only if the preparation job succeeded and created a PR.
    if: "always() && needs.prepare-release-pr.result == 'success' && needs.prepare-release-pr.outputs.pr_number"

    steps:
      # MOTIVATION: This script uses the official GitHub API client to perform a
      # "dummy" update on the Release PR. This action forces GitHub to re-trigger
      # workflows associated with the 'pull_request_target' event, solving the
      # "stuck checks" problem. This is a standard community-approved pattern.
      - name: 'Force re-evaluation of status checks'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_PLEASE_POC_TOKEN }}
          script: |
            const prNumber = ${{ needs.prepare-release-pr.outputs.pr_number }};
            console.log(`Found Release PR #${prNumber}. Triggering check re-run by updating title.`);

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              title: pr.title // Update title to its current value to trigger checks
            });